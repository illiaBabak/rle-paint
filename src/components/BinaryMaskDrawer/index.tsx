import { Dispatch, JSX, SetStateAction, useRef, useState } from "react";
import { AlertProps } from "src/types";
import { binToHex } from "src/utils/binToHex";
import { decodeRLE } from "src/utils/decodeRLE";
import { encodeRLE } from "src/utils/encodeRLE";
import { hasOtherDigits } from "src/utils/hasOtherDigits";
import { hexToBin } from "src/utils/hexToBin";

type Props = {
  setAlertProps: Dispatch<SetStateAction<AlertProps | null>>;
};

export const BinaryMaskDrawer = ({ setAlertProps }: Props): JSX.Element => {
  const [inputVal, setInputVal] = useState("");

  const canvasRef = useRef<HTMLCanvasElement | null>(null);

  const drawOnCanvas = (binaryString: string, lineIndex: number) => {
    if (!canvasRef.current) return;

    const ctx = canvasRef.current?.getContext("2d");

    if (!ctx) return;

    const pixelSize = 2;
    const yPosition = lineIndex * (pixelSize + 1);

    for (let i = 0; i < binaryString.length; i++) {
      ctx.fillStyle = binaryString[i] === "1" ? "black" : "white";
      ctx.fillRect(i * (pixelSize + 1), yPosition, pixelSize, pixelSize);
    }
  };

  const isCorrectVal = (): boolean => {
    if (hasOtherDigits(inputVal)) {
      setAlertProps({
        text: "Not binary mask!",
        type: "error",
        position: "top",
      });

      return false;
    }

    setAlertProps({ text: "Success", type: "success", position: "top" });

    return true;
  };

  const handleDraw = () => {
    if (!inputVal.length || !canvasRef.current) return;

    const ctx = canvasRef.current?.getContext("2d");

    ctx?.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);

    if (isCorrectVal()) {
      const binArr = inputVal.split(" ");

      binArr.forEach((binaryString, index) => {
        const hex = binToHex(binaryString);

        const encodedHex = encodeRLE(hex);

        const decodedHex = decodeRLE(encodedHex);

        const binToDraw = hexToBin(decodedHex);

        drawOnCanvas(binToDraw, index);
      });
    }
  };

  return (
    <>
      <canvas
        ref={canvasRef}
        className="w-[85%] h-[75%] outline-black/10 outline rounded-md shadow-lg"
      />
      <input
        value={inputVal}
        onChange={({ currentTarget: { value } }) => setInputVal(value)}
        className="w-[75%] bg-white rounded-md shadow-lg my-4 py-4 px-2 h-[40px] focus:outline-violet-400"
        placeholder="Write binary mask for element..."
        type="text"
      />
      <button
        onClick={handleDraw}
        className={`${
          !inputVal.length
            ? "cursor-not-allowed opacity-50 bg-violet-300"
            : "bg-violet-400 cursor-pointer"
        } w-[75%] text-white py-2 rounded-md duration-300 hover:scale-105`}
      >
        Draw
      </button>
    </>
  );
};

// 1) Arrow
// 00001000 00001100 00001110 11111111 00001110 00001100 00001000 00000000

// 2) Link icon


// 3) Eye

